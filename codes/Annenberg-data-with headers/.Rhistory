all_descriptives_incumbent.R = Speech_descriptives_analysis %>% filter(party == "R") %>% group_by(party_incumbent) %>% summarise(Num.speeches = n(),mean_par_num = round(mean(n_pars),0), mean_speech_length = round(mean(speech_length),0),min_date =  min(date, na.rm = T), max_date = max(date, na.rm = T) ) %>% select(-party_incumbent) # drop fisrt column to avoid duplicates
all_descriptives_incumbent.D = Speech_descriptives_analysis %>% filter(party == "D") %>% group_by(party_incumbent) %>% summarise(Num.speeches = n(),mean_par_num = round(mean(n_pars),0), mean_speech_length = round(mean(speech_length),0),min_date =  min(date, na.rm = T), max_date = max(date, na.rm = T) ) %>% select(-party_incumbent)
table2[2:3, ] = cbind(all_descriptives_incumbent, all_descriptives_incumbent.R, all_descriptives_incumbent.D)
table2
# make year rows (17)
all_descriptives_year = Speech_descriptives_analysis %>% group_by(term) %>% summarise(Num.speeches = n(),mean_par_num = round(mean(n_pars),0), mean_speech_length = round(mean(speech_length),0),min_date =  min(date, na.rm = T), max_date = max(date, na.rm = T) )
all_descriptives_year.R = Speech_descriptives_analysis %>% filter(party == "R") %>% group_by(term) %>% summarise(Num.speeches = n(),mean_par_num = round(mean(n_pars),0), mean_speech_length = round(mean(speech_length),0),min_date =  min(date, na.rm = T), max_date = max(date, na.rm = T) )
all_descriptives_year.D = Speech_descriptives_analysis %>% filter(party == "D") %>% group_by(term) %>% summarise(Num.speeches = n(),mean_par_num = round(mean(n_pars),0), mean_speech_length = round(mean(speech_length),0),min_date =  min(date, na.rm = T), max_date = max(date, na.rm = T) )
table2[4:20, ] = left_join(left_join(all_descriptives_year, all_descriptives_year.R, by = "term"), all_descriptives_year.D, by = "term")
table2
table2[2:3, "groups"] = c("challenger", "incumbent")
sapply(table2[, c(5,6,10,11,15,16)],substr, 3,10)
# frop year info for each campaign
table2[, c(5,6,10,11,15,16)] = sapply(table2[, c(5,6,10,11,15,16)],substr, 3,10)
table2
?kable()
kbl(table2) %>%
kable_classic() %>%
add_header_above(c(" " = 1, "Both Parties" = 5, "Republican" = 5, "Democrat" = 5))
table2
kbl(table2) %>%
kable_classic() %>%
add_header_above(c("" = 1, "Both Parties" = 5, "Republican" = 5, "Democrat" = 5))
kbl(table2) %>%
kable_classic() %>%
add_header_above(c(" " = 1, "Both Parties" = 5, "Republican" = 5, "Democrat" = 5))
kbl(table2) %>%
+   kable_classic()
kbl(table2) %>%
kable_classic()
?kbl
kbl(table2, row.names = F) %>%
kable_classic() %>%
add_header_above(c(" " = 1, "Both Parties" = 5, "Republican" = 5, "Democrat" = 5))
kbl(table2, row.names = F, format = "latex") %>%
kable_classic() %>%
add_header_above(c(" " = 1, "Both Parties" = 5, "Republican" = 5, "Democrat" = 5))
kbl(table1, row.names = F, format = "latex") %>%
kable_classic() %>%
add_header_above(c(" " = 1, "Both Parties" = 5, "Republican" = 5, "Democrat" = 5))
table1 = data.frame(groups = character(),
Num.speeches = integer(), avg.par.num = integer(),avg.length = integer(), min.date = as.Date(character()),max.date =as.Date(character()),
Num.speeches.R = integer(),mean.par.num.R = integer(),avg.length.R = integer(),min.date.R = as.Date(character()),max.date.R = as.Date(character()),
Num.speeches.D = integer(), mean.par.num.D = integer(), avg.length.D = integer(),min.date.D = as.Date(character()),max.date.D= as.Date(character()),
stringsAsFactors=FALSE)
# first row all sample
Speech_descriptives$date = as.Date(Speech_descriptives$date)
all_descriptives = Speech_descriptives %>% summarise(Num.speeches = n(),mean_par_num = round(mean(n_pars),0), mean_speech_length = round(mean(speech_length),0),min_date =  min(date, na.rm = T), max_date = max(date, na.rm = T) )
all_descriptives.R = Speech_descriptives %>% filter(party == "R") %>% summarise(Num.speeches = n(),mean_par_num = round(mean(n_pars),0), mean_speech_length =  round(mean(speech_length),0),min_date =  min(date, na.rm = T), max_date = max(date, na.rm = T) )
all_descriptives.D =  Speech_descriptives %>% filter(party == "D") %>% summarise(Num.speeches = n(),mean_par_num = round(mean(n_pars),0), mean_speech_length =  round(mean(speech_length),0),min_date =  min(date, na.rm = T), max_date = max(date, na.rm = T) )
table1[nrow(table1)+1, ] = c(groups = "full sample", all_descriptives, all_descriptives.R, all_descriptives.R)
# make incumbency rows (2)
all_descriptives_incumbent = Speech_descriptives %>% group_by(party_incumbent) %>% summarise(Num.speeches = n(),mean_par_num = round(mean(n_pars),0), mean_speech_length = round(mean(speech_length),0),min_date =  min(date, na.rm = T), max_date = max(date, na.rm = T) )
all_descriptives_incumbent.R = Speech_descriptives %>% filter(party == "R") %>% group_by(party_incumbent) %>% summarise(Num.speeches = n(),mean_par_num = round(mean(n_pars),0), mean_speech_length = round(mean(speech_length),0),min_date =  min(date, na.rm = T), max_date = max(date, na.rm = T) ) %>% select(-party_incumbent) # drop fisrt column to avoid duplicates
all_descriptives_incumbent.D = Speech_descriptives %>% filter(party == "D") %>% group_by(party_incumbent) %>% summarise(Num.speeches = n(),mean_par_num = round(mean(n_pars),0), mean_speech_length = round(mean(speech_length),0),min_date =  min(date, na.rm = T), max_date = max(date, na.rm = T) ) %>% select(-party_incumbent)
table1[2:3, ] = cbind(all_descriptives_incumbent, all_descriptives_incumbent.R, all_descriptives_incumbent.D)
# make year rows (17)
all_descriptives_year = Speech_descriptives %>% group_by(term) %>% summarise(Num.speeches = n(),mean_par_num = round(mean(n_pars),0), mean_speech_length = round(mean(speech_length),0),min_date =  min(date, na.rm = T), max_date = max(date, na.rm = T) )
all_descriptives_year.R = Speech_descriptives %>% filter(party == "R") %>% group_by(term) %>% summarise(Num.speeches = n(),mean_par_num = round(mean(n_pars),0), mean_speech_length = round(mean(speech_length),0),min_date =  min(date, na.rm = T), max_date = max(date, na.rm = T) )
all_descriptives_year.D = Speech_descriptives %>% filter(party == "D") %>% group_by(term) %>% summarise(Num.speeches = n(),mean_par_num = round(mean(n_pars),0), mean_speech_length = round(mean(speech_length),0),min_date =  min(date, na.rm = T), max_date = max(date, na.rm = T) )
table1[4:20, ] = left_join(left_join(all_descriptives_year, all_descriptives_year.R, by = "term"), all_descriptives_year.D, by = "term")
table1[2:3, "groups"] = c("challenger", "incumbent")
# frop year info for each campaign
table1[, c(5,6,10,11,15,16)] = sapply(table1[, c(5,6,10,11,15,16)],substr, 3,10)
table1
kbl(table1, row.names = F, format = "latex") %>%
kable_classic() %>%
add_header_above(c(" " = 1, "Both Parties" = 5, "Republican" = 5, "Democrat" = 5))
kbl(table1, row.names = F, format = "latex") %>%
kable_classic() %>%
add_header_above(c(" " = 1, "Both Parties" = 5, "Republican" = 5, "Democrat" = 5))
Speech_descriptives[Speech_descriptives$month_day > "11-01"]
election_day = read.csv("/Users/yuchenluo/Desktop/Measure_RadicalDiscourse/codes/Other_Meta.csv")
Speech_descriptives_election = left_join(Speech_descriptives, election_day, by = c("term", "party"))
head(Speech_descriptives_election)
### Combine descriptive variables
Speech_descriptives = left_join(par_counts, Speech_length, by = "Speech_id")
Speech_descriptives = left_join(Speech_descriptives,unique(speech_data %>% select(Speech_id, party, term)))
Speech_descriptives$party = as.character(Speech_descriptives$party)
Speech_descriptives$Speech_id = as.character(Speech_descriptives$Speech_id)
Speech_descriptives[Speech_descriptives$party == "rep", 'party'] = "republican"
Speech_descriptives[Speech_descriptives$party == "dem", 'party'] = "democrat"
Speech_descriptives = left_join(Speech_descriptives, regression %>% select(term, party, party_incumbent, recession), by = c("term", "party"))
dates = read.csv("/Users/yuchenluo/Desktop/Measure_RadicalDiscourse/codes/Speech_Dates_updated.csv")
dates$id_speech = as.character(dates$id_speech)
Speech_descriptives = left_join(Speech_descriptives, dates %>% select(id_speech, date), by = c("Speech_id" = "id_speech"))
setDT(Speech_descriptives)
Speech_descriptives$date = as.Date(Speech_descriptives$date, format = "%m/%d/%Y")
# change into character, otherwise the regex won't work for UCSB
Speech_descriptives$date = as.character(Speech_descriptives$date)
# add for UCSB
Speech_descriptives[is.na(Speech_descriptives$date) & nchar(Speech_descriptives$Speech_id)>4, date := substr(Speech_id, 1, 10)]
Speech_descriptives_election = left_join(Speech_descriptives, election_day, by = c("term", "party"))
Speech_descriptives_election
Speech_descriptives_election[Speech_descriptives_election$date > Speech_descriptives_election$election_date |Speech_descriptives_election$date == Speech_descriptives_election$election_date, ]
Speech_descriptives_election[as.Date(Speech_descriptives_election$date) > as.Date(Speech_descriptives_election$election_date) |Speech_descriptives_election$date == Speech_descriptives_election$election_date, ]
Speech_descriptives = Speech_descriptives_election[as.Date(Speech_descriptives_election$date) > as.Date(Speech_descriptives_election$election_date) |Speech_descriptives_election$date == Speech_descriptives_election$election_date, ]
Speech_descriptives
kbl(table2, row.names = F) %>%
kable_classic() %>%
add_header_above(c(" " = 1, "Both Parties" = 5, "Republican" = 5, "Democrat" = 5))
?kbl
columns = c("N\\Speeches", "Mean Paras",  "Mean\\Words","Min Date", "Max Date",
"N\\Speeches", "Mean Paras",  "Mean\\Words","Min Date", "Max Date",
"N\\Speeches", "Mean Paras",  "Mean\\Words","Min Date", "Max Date"
)
)
kbl(table2, row.names = F,  col.names = columns) %>%
kable_classic() %>%
add_header_above(c(" " = 1, "Both Parties" = 5, "Republican" = 5, "Democrat" = 5))
columns = c(" ","N\\Speeches", "Mean Paras",  "Mean\\Words","Min Date", "Max Date",
"N\\Speeches", "Mean Paras",  "Mean\\Words","Min Date", "Max Date",
"N\\Speeches", "Mean Paras",  "Mean\\Words","Min Date", "Max Date"
)
)
kbl(table2, row.names = F,  col.names = columns) %>%
kable_classic() %>%
add_header_above(c(" " = 1, "Both Parties" = 5, "Republican" = 5, "Democrat" = 5))
?format
sapply(table2[, c(5,6,10,11,15,16)], format, "%m/%d")
class(table2$max.date)
#### ---- Compact Table
# make a data table 3*5 cols and 1 full + 2incumbent + 17yr rows
table2 = data.frame(groups = character(),
Num.speeches = integer(), avg.par.num = integer(),avg.length = integer(), min.date = as.Date(character()),max.date =as.Date(character()),
Num.speeches.R = integer(),mean.par.num.R = integer(),avg.length.R = integer(),min.date.R = as.Date(character()),max.date.R = as.Date(character()),
Num.speeches.D = integer(), mean.par.num.D = integer(), avg.length.D = integer(),min.date.D = as.Date(character()),max.date.D= as.Date(character()),
stringsAsFactors=FALSE)
# first row all sample
Speech_descriptives_analysis$date = as.Date(Speech_descriptives_analysis$date)
all_descriptives = Speech_descriptives_analysis %>% summarise(Num.speeches = n(),mean_par_num = round(mean(n_pars),0), mean_speech_length = round(mean(speech_length),0),min_date =  min(date, na.rm = T), max_date = max(date, na.rm = T) )
all_descriptives.R = Speech_descriptives_analysis %>% filter(party == "R") %>% summarise(Num.speeches = n(),mean_par_num = round(mean(n_pars),0), mean_speech_length =  round(mean(speech_length),0),min_date =  min(date, na.rm = T), max_date = max(date, na.rm = T) )
all_descriptives.D =  Speech_descriptives_analysis %>% filter(party == "D") %>% summarise(Num.speeches = n(),mean_par_num = round(mean(n_pars),0), mean_speech_length =  round(mean(speech_length),0),min_date =  min(date, na.rm = T), max_date = max(date, na.rm = T) )
table2[nrow(table2)+1, ] = c(groups = "full sample", all_descriptives, all_descriptives.R, all_descriptives.R)
# make incumbency rows (2)
all_descriptives_incumbent = Speech_descriptives_analysis %>% group_by(party_incumbent) %>% summarise(Num.speeches = n(),mean_par_num = round(mean(n_pars),0), mean_speech_length = round(mean(speech_length),0),min_date =  min(date, na.rm = T), max_date = max(date, na.rm = T) )
all_descriptives_incumbent.R = Speech_descriptives_analysis %>% filter(party == "R") %>% group_by(party_incumbent) %>% summarise(Num.speeches = n(),mean_par_num = round(mean(n_pars),0), mean_speech_length = round(mean(speech_length),0),min_date =  min(date, na.rm = T), max_date = max(date, na.rm = T) ) %>% select(-party_incumbent) # drop fisrt column to avoid duplicates
all_descriptives_incumbent.D = Speech_descriptives_analysis %>% filter(party == "D") %>% group_by(party_incumbent) %>% summarise(Num.speeches = n(),mean_par_num = round(mean(n_pars),0), mean_speech_length = round(mean(speech_length),0),min_date =  min(date, na.rm = T), max_date = max(date, na.rm = T) ) %>% select(-party_incumbent)
table2[2:3, ] = cbind(all_descriptives_incumbent, all_descriptives_incumbent.R, all_descriptives_incumbent.D)
# make year rows (17)
all_descriptives_year = Speech_descriptives_analysis %>% group_by(term) %>% summarise(Num.speeches = n(),mean_par_num = round(mean(n_pars),0), mean_speech_length = round(mean(speech_length),0),min_date =  min(date, na.rm = T), max_date = max(date, na.rm = T) )
all_descriptives_year.R = Speech_descriptives_analysis %>% filter(party == "R") %>% group_by(term) %>% summarise(Num.speeches = n(),mean_par_num = round(mean(n_pars),0), mean_speech_length = round(mean(speech_length),0),min_date =  min(date, na.rm = T), max_date = max(date, na.rm = T) )
all_descriptives_year.D = Speech_descriptives_analysis %>% filter(party == "D") %>% group_by(term) %>% summarise(Num.speeches = n(),mean_par_num = round(mean(n_pars),0), mean_speech_length = round(mean(speech_length),0),min_date =  min(date, na.rm = T), max_date = max(date, na.rm = T) )
table2[4:20, ] = left_join(left_join(all_descriptives_year, all_descriptives_year.R, by = "term"), all_descriptives_year.D, by = "term")
table2[2:3, "groups"] = c("challenger", "incumbent")
sapply(table2[, c(5,6,10,11,15,16)], format, "%Y/%m/%d")
sapply(table2[, c(5,6,10,11,15,16)], format, "%m/%d")
?kbl
kbl(table2, row.names = F,  col.names = columns,format.args = list(big.mark = ",")) %>%
kable_classic() %>%
add_header_above(c(" " = 1, "Both Parties" = 5, "Republican" = 5, "Democrat" = 5))
# frop year info for each campaign
table2[, c(5,6,10,11,15,16)] = sapply(table2[, c(5,6,10,11,15,16)], format, "%m/%d")
columns = c(" ","N Speeches", "Mean Paras",  "Mean Words","Min Date", "Max Date",
"N Speeches", "Mean Paras",  "Mean Words","Min Date", "Max Date",
"N Speeches", "Mean Paras",  "Mean Words","Min Date", "Max Date"
)
kbl(table2, row.names = F, format = "latex", col.names = columns,format.args = list(big.mark = ",")) %>%
kable_classic() %>%
add_header_above(c(" " = 1, "Both Parties" = 5, "Republican" = 5, "Democrat" = 5))
kbl(table2, row.names = F, col.names = columns,format.args = list(big.mark = ",")) %>%
kable_classic() %>%
add_header_above(c(" " = 1, "Both Parties" = 5, "Republican" = 5, "Democrat" = 5))
kbl(table2, row.names = F, format = "latex", col.names = columns,format.args = list(big.mark = ",")) %>%
kable_classic() %>%
add_header_above(c(" " = 1, "Both Parties" = 5, "Republican" = 5, "Democrat" = 5))
kbl(table2, row.names = F, format = "latex", col.names = columns,format.args = list(big.mark = ",")) %>%
kable_minimal() %>%
add_header_above(c(" " = 1, "Both Parties" = 5, "Republican" = 5, "Democrat" = 5))
?kable()
kbl(table2, row.names = F, format = "latex", col.names = columns,format.args = list(big.mark = ","),booktabs = T) %>%
kable_minimal() %>%
add_header_above(c(" " = 1, "Both Parties" = 5, "Republican" = 5, "Democrat" = 5))
kbl(table1, row.names = F, format = "latex", col.names = columns,format.args = list(big.mark = ","),booktabs = T) %>%
kable_minimal() %>%
add_header_above(c(" " = 1, "Both Parties" = 5, "Republican" = 5, "Democrat" = 5))
#### ---- Compact Table ---------------------------------------
# make a data table 3*5 cols and 1 full + 2incumbent + 17yr rows
table1 = data.frame(groups = character(),
Num.speeches = integer(), avg.par.num = integer(),avg.length = integer(), min.date = as.Date(character()),max.date =as.Date(character()),
Num.speeches.R = integer(),mean.par.num.R = integer(),avg.length.R = integer(),min.date.R = as.Date(character()),max.date.R = as.Date(character()),
Num.speeches.D = integer(), mean.par.num.D = integer(), avg.length.D = integer(),min.date.D = as.Date(character()),max.date.D= as.Date(character()),
stringsAsFactors=FALSE)
### Combine descriptive variables
Speech_descriptives = left_join(par_counts, Speech_length, by = "Speech_id")
Speech_descriptives = left_join(Speech_descriptives,unique(speech_data %>% select(Speech_id, party, term)))
Speech_descriptives$party = as.character(Speech_descriptives$party)
Speech_descriptives$Speech_id = as.character(Speech_descriptives$Speech_id)
Speech_descriptives[Speech_descriptives$party == "rep", 'party'] = "republican"
Speech_descriptives[Speech_descriptives$party == "dem", 'party'] = "democrat"
Speech_descriptives = left_join(Speech_descriptives, regression %>% select(term, party, party_incumbent, recession), by = c("term", "party"))
# abbreviate Rep and Dem for table fit
Speech_descriptives[Speech_descriptives$party == "republican", 'party'] = "R"
Speech_descriptives[Speech_descriptives$party == "democrat", 'party'] = "D"
Speech_descriptives = Speech_descriptives[!(Speech_descriptives$party == "R" & Speech_descriptives$term == 2000), ]
# add date
dates = read.csv("/Users/yuchenluo/Desktop/Measure_RadicalDiscourse/codes/Speech_Dates_updated.csv")
dates$id_speech = as.character(dates$id_speech)
Speech_descriptives = left_join(Speech_descriptives, dates %>% select(id_speech, date), by = c("Speech_id" = "id_speech"))
setDT(Speech_descriptives)
Speech_descriptives$date = as.Date(Speech_descriptives$date, format = "%m/%d/%Y")
# change into character, otherwise the regex won't work for UCSB
Speech_descriptives$date = as.character(Speech_descriptives$date)
# add for UCSB
Speech_descriptives[is.na(Speech_descriptives$date) & nchar(Speech_descriptives$Speech_id)>4, date := substr(Speech_id, 1, 10)]
# write.csv(Speech_descriptives, "speech_descriptives.csv")
# make a data table
table = data.frame(properties = character(), Num.speeches = integer(), mean_par_num = numeric() , mean_speech_length = numeric(), min_date = character(), max_date =character(), stringsAsFactors=FALSE)
# row.names(table) = c("Full Sample", "Republican", "Democratic", "Party Incumbent", "Party Challenger")
table[1,] =  c("Full sample", nrow(Speech_descriptives), mean(Speech_descriptives$n_pars), mean(Speech_descriptives$speech_length), min(Speech_descriptives$date, na.rm = T), max(Speech_descriptives$date, na.rm = T))
party = Speech_descriptives %>% group_by(party) %>% summarise(Num.speeches = n(),mean_par_num = mean(n_pars), mean_speech_length = mean(speech_length),min_date =  min(date, na.rm = T), max_date = max(date, na.rm = T) )
colnames(party)[1] = "properties"
incumbent = Speech_descriptives %>% group_by(party_incumbent) %>% summarise(Num.speeches = n(),mean_par_num = mean(n_pars), mean_speech_length = mean(speech_length),min_date =  min(date, na.rm = T), max_date = max(date, na.rm = T) )
colnames(incumbent)[1] = "properties"
specific_campaigns = Speech_descriptives %>% group_by(term, party) %>% summarise(Num.speeches = n(),mean_par_num = mean(n_pars), mean_speech_length = mean(speech_length),min_date =  min(date, na.rm = T), max_date = max(date, na.rm = T) )
# make a campaign column to fit the other rows
specific_campaigns$campaign = paste0(specific_campaigns$term, specific_campaigns$party)
specific_campaigns = specific_campaigns[,3:8]
specific_campaigns= specific_campaigns[, c(6, 1, 2, 3, 4, 5)]
colnames(specific_campaigns)[1] = "properties"
### Combine rows
table = rbind(table, party, incumbent, specific_campaigns)
# delete Bush 2000
table = table[-c(6, 31),]
# fill the row names properly
table[4:5, "properties"] = c("challenger", "incumbent")
# frop year info for each campaign
table[7:37, 5:6] = sapply(table[7:37, 5:6],substr, 6,10)
table = t(table)
table[2:4,] = sapply(table[2:4, ], as.integer) # round up to save space
table1 = data.frame(groups = character(),
Num.speeches = integer(), avg.par.num = integer(),avg.length = integer(), min.date = as.Date(character()),max.date =as.Date(character()),
Num.speeches.R = integer(),mean.par.num.R = integer(),avg.length.R = integer(),min.date.R = as.Date(character()),max.date.R = as.Date(character()),
Num.speeches.D = integer(), mean.par.num.D = integer(), avg.length.D = integer(),min.date.D = as.Date(character()),max.date.D= as.Date(character()),
stringsAsFactors=FALSE)
# first row all sample
Speech_descriptives$date = as.Date(Speech_descriptives$date)
all_descriptives = Speech_descriptives %>% summarise(Num.speeches = n(),mean_par_num = round(mean(n_pars),0), mean_speech_length = round(mean(speech_length),0),min_date =  min(date, na.rm = T), max_date = max(date, na.rm = T) )
all_descriptives.R = Speech_descriptives %>% filter(party == "R") %>% summarise(Num.speeches = n(),mean_par_num = round(mean(n_pars),0), mean_speech_length =  round(mean(speech_length),0),min_date =  min(date, na.rm = T), max_date = max(date, na.rm = T) )
all_descriptives.D =  Speech_descriptives %>% filter(party == "D") %>% summarise(Num.speeches = n(),mean_par_num = round(mean(n_pars),0), mean_speech_length =  round(mean(speech_length),0),min_date =  min(date, na.rm = T), max_date = max(date, na.rm = T) )
table1[nrow(table1)+1, ] = c(groups = "full sample", all_descriptives, all_descriptives.R, all_descriptives.R)
# make incumbency rows (2)
all_descriptives_incumbent = Speech_descriptives %>% group_by(party_incumbent) %>% summarise(Num.speeches = n(),mean_par_num = round(mean(n_pars),0), mean_speech_length = round(mean(speech_length),0),min_date =  min(date, na.rm = T), max_date = max(date, na.rm = T) )
all_descriptives_incumbent.R = Speech_descriptives %>% filter(party == "R") %>% group_by(party_incumbent) %>% summarise(Num.speeches = n(),mean_par_num = round(mean(n_pars),0), mean_speech_length = round(mean(speech_length),0),min_date =  min(date, na.rm = T), max_date = max(date, na.rm = T) ) %>% select(-party_incumbent) # drop fisrt column to avoid duplicates
all_descriptives_incumbent.D = Speech_descriptives %>% filter(party == "D") %>% group_by(party_incumbent) %>% summarise(Num.speeches = n(),mean_par_num = round(mean(n_pars),0), mean_speech_length = round(mean(speech_length),0),min_date =  min(date, na.rm = T), max_date = max(date, na.rm = T) ) %>% select(-party_incumbent)
table1[2:3, ] = cbind(all_descriptives_incumbent, all_descriptives_incumbent.R, all_descriptives_incumbent.D)
# make year rows (17)
all_descriptives_year = Speech_descriptives %>% group_by(term) %>% summarise(Num.speeches = n(),mean_par_num = round(mean(n_pars),0), mean_speech_length = round(mean(speech_length),0),min_date =  min(date, na.rm = T), max_date = max(date, na.rm = T) )
all_descriptives_year.R = Speech_descriptives %>% filter(party == "R") %>% group_by(term) %>% summarise(Num.speeches = n(),mean_par_num = round(mean(n_pars),0), mean_speech_length = round(mean(speech_length),0),min_date =  min(date, na.rm = T), max_date = max(date, na.rm = T) )
all_descriptives_year.D = Speech_descriptives %>% filter(party == "D") %>% group_by(term) %>% summarise(Num.speeches = n(),mean_par_num = round(mean(n_pars),0), mean_speech_length = round(mean(speech_length),0),min_date =  min(date, na.rm = T), max_date = max(date, na.rm = T) )
table1[4:20, ] = left_join(left_join(all_descriptives_year, all_descriptives_year.R, by = "term"), all_descriptives_year.D, by = "term")
table1[2:3, "groups"] = c("challenger", "incumbent")
sapply(table1[, c(5,6,10,11,15,16)], format, "%m/%d")
# frop year info for each campaign
table1[, c(5,6,10,11,15,16)] = sapply(table1[, c(5,6,10,11,15,16)], format, "%m/%d")
kbl(table1, row.names = F, format = "latex", col.names = columns,format.args = list(big.mark = ","),booktabs = T) %>%
kable_minimal() %>%
add_header_above(c(" " = 1, "Both Parties" = 5, "Republican" = 5, "Democrat" = 5))
Speech_descriptives = Speech_descriptives_election[as.Date(Speech_descriptives_election$date) > as.Date(Speech_descriptives_election$election_date) |Speech_descriptives_election$date == Speech_descriptives_election$election_date, ]
Speech_descriptives = left_join(par_counts, Speech_length, by = "Speech_id")
Speech_descriptives = left_join(Speech_descriptives,unique(speech_data %>% select(Speech_id, party, term)))
regression = read.csv("/Users/yuchenluo/Desktop/Measure_RadicalDiscourse/codes/regression_df.csv")
Speech_descriptives$party = as.character(Speech_descriptives$party)
Speech_descriptives$Speech_id = as.character(Speech_descriptives$Speech_id)
Speech_descriptives[Speech_descriptives$party == "rep", 'party'] = "republican"
Speech_descriptives[Speech_descriptives$party == "dem", 'party'] = "democrat"
Speech_descriptives = left_join(Speech_descriptives, regression %>% select(term, party, party_incumbent, recession), by = c("term", "party"))
# abbreviate Rep and Dem for table fit
Speech_descriptives[Speech_descriptives$party == "republican", 'party'] = "R"
Speech_descriptives[Speech_descriptives$party == "democrat", 'party'] = "D"
Speech_descriptives = Speech_descriptives[!(Speech_descriptives$party == "R" & Speech_descriptives$term == 2000), ]
# add date
dates = read.csv("/Users/yuchenluo/Desktop/Measure_RadicalDiscourse/codes/Speech_Dates_updated.csv")
dates$id_speech = as.character(dates$id_speech)
Speech_descriptives = left_join(Speech_descriptives, dates %>% select(id_speech, date), by = c("Speech_id" = "id_speech"))
setDT(Speech_descriptives)
Speech_descriptives$date = as.Date(Speech_descriptives$date, format = "%m/%d/%Y")
# change into character, otherwise the regex won't work for UCSB
Speech_descriptives$date = as.character(Speech_descriptives$date)
# add for UCSB
Speech_descriptives[is.na(Speech_descriptives$date) & nchar(Speech_descriptives$Speech_id)>4, date := substr(Speech_id, 1, 10)]
Speech_descriptives_election[as.Date(Speech_descriptives_election$date) < as.Date(Speech_descriptives_election$election_date), ]
Speech_descriptives = Speech_descriptives_election[as.Date(Speech_descriptives_election$date) < as.Date(Speech_descriptives_election$election_date), ]
# make a data table 3*5 cols and 1 full + 2incumbent + 17yr rows
table1 = data.frame(groups = character(),
Num.speeches = integer(), avg.par.num = integer(),avg.length = integer(), min.date = as.Date(character()),max.date =as.Date(character()),
Num.speeches.R = integer(),mean.par.num.R = integer(),avg.length.R = integer(),min.date.R = as.Date(character()),max.date.R = as.Date(character()),
Num.speeches.D = integer(), mean.par.num.D = integer(), avg.length.D = integer(),min.date.D = as.Date(character()),max.date.D= as.Date(character()),
stringsAsFactors=FALSE)
# first row all sample
Speech_descriptives$date = as.Date(Speech_descriptives$date)
all_descriptives = Speech_descriptives %>% summarise(Num.speeches = n(),mean_par_num = round(mean(n_pars),0), mean_speech_length = round(mean(speech_length),0),min_date =  min(date, na.rm = T), max_date = max(date, na.rm = T) )
all_descriptives.R = Speech_descriptives %>% filter(party == "R") %>% summarise(Num.speeches = n(),mean_par_num = round(mean(n_pars),0), mean_speech_length =  round(mean(speech_length),0),min_date =  min(date, na.rm = T), max_date = max(date, na.rm = T) )
all_descriptives.D =  Speech_descriptives %>% filter(party == "D") %>% summarise(Num.speeches = n(),mean_par_num = round(mean(n_pars),0), mean_speech_length =  round(mean(speech_length),0),min_date =  min(date, na.rm = T), max_date = max(date, na.rm = T) )
table1[nrow(table1)+1, ] = c(groups = "full sample", all_descriptives, all_descriptives.R, all_descriptives.R)
# make incumbency rows (2)
all_descriptives_incumbent = Speech_descriptives %>% group_by(party_incumbent) %>% summarise(Num.speeches = n(),mean_par_num = round(mean(n_pars),0), mean_speech_length = round(mean(speech_length),0),min_date =  min(date, na.rm = T), max_date = max(date, na.rm = T) )
Speech_descriptives = left_join(par_counts, Speech_length, by = "Speech_id")
Speech_descriptives = left_join(Speech_descriptives,unique(speech_data %>% select(Speech_id, party, term)))
Speech_descriptives$party = as.character(Speech_descriptives$party)
Speech_descriptives$Speech_id = as.character(Speech_descriptives$Speech_id)
Speech_descriptives[Speech_descriptives$party == "rep", 'party'] = "republican"
Speech_descriptives[Speech_descriptives$party == "dem", 'party'] = "democrat"
Speech_descriptives = left_join(Speech_descriptives, regression %>% select(term, party, party_incumbent, recession), by = c("term", "party"))
# abbreviate Rep and Dem for table fit
Speech_descriptives[Speech_descriptives$party == "republican", 'party'] = "R"
Speech_descriptives[Speech_descriptives$party == "democrat", 'party'] = "D"
Speech_descriptives = Speech_descriptives[!(Speech_descriptives$party == "R" & Speech_descriptives$term == 2000), ]
# add date
dates = read.csv("/Users/yuchenluo/Desktop/Measure_RadicalDiscourse/codes/Speech_Dates_updated.csv")
dates$id_speech = as.character(dates$id_speech)
Speech_descriptives = left_join(Speech_descriptives, dates %>% select(id_speech, date), by = c("Speech_id" = "id_speech"))
setDT(Speech_descriptives)
Speech_descriptives$date = as.Date(Speech_descriptives$date, format = "%m/%d/%Y")
# change into character, otherwise the regex won't work for UCSB
Speech_descriptives$date = as.character(Speech_descriptives$date)
# add for UCSB
Speech_descriptives[is.na(Speech_descriptives$date) & nchar(Speech_descriptives$Speech_id)>4, date := substr(Speech_id, 1, 10)]
# drop later or on election day
Speech_descriptives = Speech_descriptives_election[as.Date(Speech_descriptives_election$date) < as.Date(Speech_descriptives_election$election_date), ]
table1 = data.frame(groups = character(),
Num.speeches = integer(), avg.par.num = integer(),avg.length = integer(), min.date = as.Date(character()),max.date =as.Date(character()),
Num.speeches.R = integer(),mean.par.num.R = integer(),avg.length.R = integer(),min.date.R = as.Date(character()),max.date.R = as.Date(character()),
Num.speeches.D = integer(), mean.par.num.D = integer(), avg.length.D = integer(),min.date.D = as.Date(character()),max.date.D= as.Date(character()),
stringsAsFactors=FALSE)
# first row all sample
Speech_descriptives$date = as.Date(Speech_descriptives$date)
all_descriptives = Speech_descriptives %>% summarise(Num.speeches = n(),mean_par_num = round(mean(n_pars),0), mean_speech_length = round(mean(speech_length),0),min_date =  min(date, na.rm = T), max_date = max(date, na.rm = T) )
all_descriptives.R = Speech_descriptives %>% filter(party == "R") %>% summarise(Num.speeches = n(),mean_par_num = round(mean(n_pars),0), mean_speech_length =  round(mean(speech_length),0),min_date =  min(date, na.rm = T), max_date = max(date, na.rm = T) )
all_descriptives.D =  Speech_descriptives %>% filter(party == "D") %>% summarise(Num.speeches = n(),mean_par_num = round(mean(n_pars),0), mean_speech_length =  round(mean(speech_length),0),min_date =  min(date, na.rm = T), max_date = max(date, na.rm = T) )
table1[nrow(table1)+1, ] = c(groups = "full sample", all_descriptives, all_descriptives.R, all_descriptives.R)
# make incumbency rows (2)
all_descriptives_incumbent = Speech_descriptives %>% group_by(party_incumbent) %>% summarise(Num.speeches = n(),mean_par_num = round(mean(n_pars),0), mean_speech_length = round(mean(speech_length),0),min_date =  min(date, na.rm = T), max_date = max(date, na.rm = T) )
### Combine descriptive variables
Speech_descriptives = left_join(par_counts, Speech_length, by = "Speech_id")
Speech_descriptives = left_join(Speech_descriptives,unique(speech_data %>% select(Speech_id, party, term)))
Speech_descriptives$party = as.character(Speech_descriptives$party)
Speech_descriptives$Speech_id = as.character(Speech_descriptives$Speech_id)
Speech_descriptives[Speech_descriptives$party == "rep", 'party'] = "republican"
Speech_descriptives[Speech_descriptives$party == "dem", 'party'] = "democrat"
Speech_descriptives = left_join(Speech_descriptives, regression %>% select(term, party, party_incumbent, recession), by = c("term", "party"))
# abbreviate Rep and Dem for table fit
Speech_descriptives[Speech_descriptives$party == "republican", 'party'] = "R"
Speech_descriptives[Speech_descriptives$party == "democrat", 'party'] = "D"
# drop Bush 2000
Speech_descriptives = Speech_descriptives[!(Speech_descriptives$party == "R" & Speech_descriptives$term == 2000), ]
# add date
dates = read.csv("/Users/yuchenluo/Desktop/Measure_RadicalDiscourse/codes/Speech_Dates_updated.csv")
dates$id_speech = as.character(dates$id_speech)
Speech_descriptives = left_join(Speech_descriptives, dates %>% select(id_speech, date), by = c("Speech_id" = "id_speech"))
setDT(Speech_descriptives)
Speech_descriptives$date = as.Date(Speech_descriptives$date, format = "%m/%d/%Y")
# change into character, otherwise the regex won't work for UCSB
Speech_descriptives$date = as.character(Speech_descriptives$date)
# add for UCSB
Speech_descriptives[is.na(Speech_descriptives$date) & nchar(Speech_descriptives$Speech_id)>4, date := substr(Speech_id, 1, 10)]
# drop later or on election day
Speech_descriptives = Speech_descriptives_election[as.Date(Speech_descriptives_election$date) < as.Date(Speech_descriptives_election$election_date), ]
Speech_descriptives = left_join(par_counts, Speech_length, by = "Speech_id")
Speech_descriptives = left_join(Speech_descriptives,unique(speech_data %>% select(Speech_id, party, term)))
Speech_descriptives$party = as.character(Speech_descriptives$party)
Speech_descriptives$Speech_id = as.character(Speech_descriptives$Speech_id)
Speech_descriptives[Speech_descriptives$party == "rep", 'party'] = "republican"
Speech_descriptives[Speech_descriptives$party == "dem", 'party'] = "democrat"
Speech_descriptives = left_join(Speech_descriptives, regression %>% select(term, party, party_incumbent, recession), by = c("term", "party"))
Speech_descriptives[Speech_descriptives$party == "republican", 'party'] = "R"
Speech_descriptives[Speech_descriptives$party == "democrat", 'party'] = "D"
# drop Bush 2000
Speech_descriptives = Speech_descriptives[!(Speech_descriptives$party == "R" & Speech_descriptives$term == 2000), ]
dates$id_speech = as.character(dates$id_speech)
Speech_descriptives = left_join(Speech_descriptives, dates %>% select(id_speech, date), by = c("Speech_id" = "id_speech"))
setDT(Speech_descriptives)
Speech_descriptives$date = as.Date(Speech_descriptives$date, format = "%m/%d/%Y")
# change into character, otherwise the regex won't work for UCSB
Speech_descriptives$date = as.character(Speech_descriptives$date)
# add for UCSB
Speech_descriptives[is.na(Speech_descriptives$date) & nchar(Speech_descriptives$Speech_id)>4, date := substr(Speech_id, 1, 10)]
Speech_descriptives = left_join(par_counts, Speech_length, by = "Speech_id")
Speech_descriptives = left_join(Speech_descriptives,unique(speech_data %>% select(Speech_id, party, term)))
Speech_descriptives$party = as.character(Speech_descriptives$party)
Speech_descriptives$Speech_id = as.character(Speech_descriptives$Speech_id)
Speech_descriptives[Speech_descriptives$party == "rep", 'party'] = "republican"
Speech_descriptives[Speech_descriptives$party == "dem", 'party'] = "democrat"
Speech_descriptives = left_join(Speech_descriptives, regression %>% select(term, party, party_incumbent, recession), by = c("term", "party"))
# drop Bush 2000
Speech_descriptives = Speech_descriptives[!(Speech_descriptives$party == "R" & Speech_descriptives$term == 2000), ]
Speech_descriptives = left_join(Speech_descriptives, dates %>% select(id_speech, date), by = c("Speech_id" = "id_speech"))
setDT(Speech_descriptives)
Speech_descriptives$date = as.Date(Speech_descriptives$date, format = "%m/%d/%Y")
# change into character, otherwise the regex won't work for UCSB
Speech_descriptives$date = as.character(Speech_descriptives$date)
# add for UCSB
Speech_descriptives[is.na(Speech_descriptives$date) & nchar(Speech_descriptives$Speech_id)>4, date := substr(Speech_id, 1, 10)]
left_join(Speech_descriptives, election_day%>%select(party,term, election_date))
Speech_descriptives = left_join(Speech_descriptives, election_day%>%select(party,term, election_date))
Speech_descriptives = Speech_descriptives[as.Date(Speech_descriptives$date) < as.Date(Speech_descriptives$election_date), ]
table1 = data.frame(groups = character(),
Num.speeches = integer(), avg.par.num = integer(),avg.length = integer(), min.date = as.Date(character()),max.date =as.Date(character()),
Num.speeches.R = integer(),mean.par.num.R = integer(),avg.length.R = integer(),min.date.R = as.Date(character()),max.date.R = as.Date(character()),
Num.speeches.D = integer(), mean.par.num.D = integer(), avg.length.D = integer(),min.date.D = as.Date(character()),max.date.D= as.Date(character()),
stringsAsFactors=FALSE)
# first row all sample
Speech_descriptives$date = as.Date(Speech_descriptives$date)
all_descriptives = Speech_descriptives %>% summarise(Num.speeches = n(),mean_par_num = round(mean(n_pars),0), mean_speech_length = round(mean(speech_length),0),min_date =  min(date, na.rm = T), max_date = max(date, na.rm = T) )
all_descriptives.R = Speech_descriptives %>% filter(party == "R") %>% summarise(Num.speeches = n(),mean_par_num = round(mean(n_pars),0), mean_speech_length =  round(mean(speech_length),0),min_date =  min(date, na.rm = T), max_date = max(date, na.rm = T) )
all_descriptives.D =  Speech_descriptives %>% filter(party == "D") %>% summarise(Num.speeches = n(),mean_par_num = round(mean(n_pars),0), mean_speech_length =  round(mean(speech_length),0),min_date =  min(date, na.rm = T), max_date = max(date, na.rm = T) )
table1[nrow(table1)+1, ] = c(groups = "full sample", all_descriptives, all_descriptives.R, all_descriptives.R)
# make incumbency rows (2)
all_descriptives_incumbent = Speech_descriptives %>% group_by(party_incumbent) %>% summarise(Num.speeches = n(),mean_par_num = round(mean(n_pars),0), mean_speech_length = round(mean(speech_length),0),min_date =  min(date, na.rm = T), max_date = max(date, na.rm = T) )
all_descriptives_incumbent.R = Speech_descriptives %>% filter(party == "R") %>% group_by(party_incumbent) %>% summarise(Num.speeches = n(),mean_par_num = round(mean(n_pars),0), mean_speech_length = round(mean(speech_length),0),min_date =  min(date, na.rm = T), max_date = max(date, na.rm = T) ) %>% select(-party_incumbent) # drop fisrt column to avoid duplicates
all_descriptives_incumbent.D = Speech_descriptives %>% filter(party == "D") %>% group_by(party_incumbent) %>% summarise(Num.speeches = n(),mean_par_num = round(mean(n_pars),0), mean_speech_length = round(mean(speech_length),0),min_date =  min(date, na.rm = T), max_date = max(date, na.rm = T) ) %>% select(-party_incumbent)
table1[2:3, ] = cbind(all_descriptives_incumbent, all_descriptives_incumbent.R, all_descriptives_incumbent.D)
# abbreviate Rep and Dem for table fit
Speech_descriptives[Speech_descriptives$party == "republican", 'party'] = "R"
Speech_descriptives[Speech_descriptives$party == "democrat", 'party'] = "D"
#### ---- Compact Table ---------------------------------------
# make a data table 3*5 cols and 1 full + 2incumbent + 17yr rows
table1 = data.frame(groups = character(),
Num.speeches = integer(), avg.par.num = integer(),avg.length = integer(), min.date = as.Date(character()),max.date =as.Date(character()),
Num.speeches.R = integer(),mean.par.num.R = integer(),avg.length.R = integer(),min.date.R = as.Date(character()),max.date.R = as.Date(character()),
Num.speeches.D = integer(), mean.par.num.D = integer(), avg.length.D = integer(),min.date.D = as.Date(character()),max.date.D= as.Date(character()),
stringsAsFactors=FALSE)
# first row all sample
Speech_descriptives$date = as.Date(Speech_descriptives$date)
all_descriptives = Speech_descriptives %>% summarise(Num.speeches = n(),mean_par_num = round(mean(n_pars),0), mean_speech_length = round(mean(speech_length),0),min_date =  min(date, na.rm = T), max_date = max(date, na.rm = T) )
all_descriptives.R = Speech_descriptives %>% filter(party == "R") %>% summarise(Num.speeches = n(),mean_par_num = round(mean(n_pars),0), mean_speech_length =  round(mean(speech_length),0),min_date =  min(date, na.rm = T), max_date = max(date, na.rm = T) )
all_descriptives.D =  Speech_descriptives %>% filter(party == "D") %>% summarise(Num.speeches = n(),mean_par_num = round(mean(n_pars),0), mean_speech_length =  round(mean(speech_length),0),min_date =  min(date, na.rm = T), max_date = max(date, na.rm = T) )
table1[nrow(table1)+1, ] = c(groups = "full sample", all_descriptives, all_descriptives.R, all_descriptives.R)
# make incumbency rows (2)
all_descriptives_incumbent = Speech_descriptives %>% group_by(party_incumbent) %>% summarise(Num.speeches = n(),mean_par_num = round(mean(n_pars),0), mean_speech_length = round(mean(speech_length),0),min_date =  min(date, na.rm = T), max_date = max(date, na.rm = T) )
all_descriptives_incumbent.R = Speech_descriptives %>% filter(party == "R") %>% group_by(party_incumbent) %>% summarise(Num.speeches = n(),mean_par_num = round(mean(n_pars),0), mean_speech_length = round(mean(speech_length),0),min_date =  min(date, na.rm = T), max_date = max(date, na.rm = T) ) %>% select(-party_incumbent) # drop fisrt column to avoid duplicates
all_descriptives_incumbent.D = Speech_descriptives %>% filter(party == "D") %>% group_by(party_incumbent) %>% summarise(Num.speeches = n(),mean_par_num = round(mean(n_pars),0), mean_speech_length = round(mean(speech_length),0),min_date =  min(date, na.rm = T), max_date = max(date, na.rm = T) ) %>% select(-party_incumbent)
table1[2:3, ] = cbind(all_descriptives_incumbent, all_descriptives_incumbent.R, all_descriptives_incumbent.D)
# make year rows (17)
all_descriptives_year = Speech_descriptives %>% group_by(term) %>% summarise(Num.speeches = n(),mean_par_num = round(mean(n_pars),0), mean_speech_length = round(mean(speech_length),0),min_date =  min(date, na.rm = T), max_date = max(date, na.rm = T) )
all_descriptives_year.R = Speech_descriptives %>% filter(party == "R") %>% group_by(term) %>% summarise(Num.speeches = n(),mean_par_num = round(mean(n_pars),0), mean_speech_length = round(mean(speech_length),0),min_date =  min(date, na.rm = T), max_date = max(date, na.rm = T) )
all_descriptives_year.D = Speech_descriptives %>% filter(party == "D") %>% group_by(term) %>% summarise(Num.speeches = n(),mean_par_num = round(mean(n_pars),0), mean_speech_length = round(mean(speech_length),0),min_date =  min(date, na.rm = T), max_date = max(date, na.rm = T) )
table1[4:20, ] = left_join(left_join(all_descriptives_year, all_descriptives_year.R, by = "term"), all_descriptives_year.D, by = "term")
table1[2:3, "groups"] = c("challenger", "incumbent")
# frop year info for each campaign
table1[, c(5,6,10,11,15,16)] = sapply(table1[, c(5,6,10,11,15,16)], format, "%m/%d")
kbl(table1, row.names = F, format = "latex", col.names = columns,format.args = list(big.mark = ","),booktabs = T) %>%
kable_minimal() %>%
add_header_above(c(" " = 1, "Both Parties" = 5, "Republican" = 5, "Democrat" = 5))
Speech_descriptives = left_join(par_counts, Speech_length, by = "Speech_id")
Speech_descriptives = left_join(Speech_descriptives,unique(speech_data %>% select(Speech_id, party, term)))
Speech_descriptives$party = as.character(Speech_descriptives$party)
Speech_descriptives$Speech_id = as.character(Speech_descriptives$Speech_id)
Speech_descriptives[Speech_descriptives$party == "rep", 'party'] = "republican"
Speech_descriptives[Speech_descriptives$party == "dem", 'party'] = "democrat"
Speech_descriptives = left_join(Speech_descriptives, regression %>% select(term, party, party_incumbent, recession), by = c("term", "party"))
# drop Bush 2000
Speech_descriptives = Speech_descriptives[!(Speech_descriptives$party == "R" & Speech_descriptives$term == 2000), ]
# add date
dates = read.csv("/Users/yuchenluo/Desktop/Measure_RadicalDiscourse/codes/Speech_Dates_updated.csv")
dates$id_speech = as.character(dates$id_speech)
Speech_descriptives = left_join(Speech_descriptives, dates %>% select(id_speech, date), by = c("Speech_id" = "id_speech"))
setDT(Speech_descriptives)
Speech_descriptives$date = as.Date(Speech_descriptives$date, format = "%m/%d/%Y")
# change into character, otherwise the regex won't work for UCSB
Speech_descriptives$date = as.character(Speech_descriptives$date)
# add for UCSB
Speech_descriptives[is.na(Speech_descriptives$date) & nchar(Speech_descriptives$Speech_id)>4, date := substr(Speech_id, 1, 10)]
Speech_descriptives$month_day = format(Speech_descriptives$date, "%m-%d")
class(Speech_descriptives$date)
format(as.Date(Speech_descriptives$date), "%m-%d")
Speech_descriptives$month_day = format(as.Date(Speech_descriptives$date), "%m-%d")
nomination_date = Speech_descriptives %>% group_by(term, party) %>% summarise(min = min(date))
Speech_descriptives_analysis = Speech_descriptives[Speech_descriptives$month_day > "08-31" | Speech_descriptives$date %in% nomination_date$min ]
election_day = read.csv("Other_Meta.csv")
Speech_descriptives_analysis = left_join(Speech_descriptives_analysis, election_day%>%select(party,term, election_date))
Speech_descriptives_analysis = Speech_descriptives_analysis[as.Date(Speech_descriptives_analysis$date) < as.Date(Speech_descriptives_analysis$election_date), ]
# abbreviate Rep and Dem for table fit
Speech_descriptives[Speech_descriptives$party == "republican", 'party'] = "R"
Speech_descriptives[Speech_descriptives$party == "democrat", 'party'] = "D"
#### ---- Compact Table
# make a data table 3*5 cols and 1 full + 2incumbent + 17yr rows
table2 = data.frame(groups = character(),
Num.speeches = integer(), avg.par.num = integer(),avg.length = integer(), min.date = as.Date(character()),max.date =as.Date(character()),
Num.speeches.R = integer(),mean.par.num.R = integer(),avg.length.R = integer(),min.date.R = as.Date(character()),max.date.R = as.Date(character()),
Num.speeches.D = integer(), mean.par.num.D = integer(), avg.length.D = integer(),min.date.D = as.Date(character()),max.date.D= as.Date(character()),
stringsAsFactors=FALSE)
# first row all sample
Speech_descriptives_analysis$date = as.Date(Speech_descriptives_analysis$date)
all_descriptives = Speech_descriptives_analysis %>% summarise(Num.speeches = n(),mean_par_num = round(mean(n_pars),0), mean_speech_length = round(mean(speech_length),0),min_date =  min(date, na.rm = T), max_date = max(date, na.rm = T) )
all_descriptives.R = Speech_descriptives_analysis %>% filter(party == "R") %>% summarise(Num.speeches = n(),mean_par_num = round(mean(n_pars),0), mean_speech_length =  round(mean(speech_length),0),min_date =  min(date, na.rm = T), max_date = max(date, na.rm = T) )
all_descriptives.R = Speech_descriptives_analysis %>% filter(party == "R") %>% summarise(Num.speeches = n(),mean_par_num = round(mean(n_pars),0), mean_speech_length =  round(mean(speech_length),0),min_date =  min(date, na.rm = T), max_date = max(date, na.rm = T) )
Speech_descriptives_analysis
# abbreviate Rep and Dem for table fit
Speech_descriptives_analysis[Speech_descriptives_analysis$party == "republican", 'party'] = "R"
Speech_descriptives_analysis[Speech_descriptives_analysis$party == "democrat", 'party'] = "D"
all_descriptives.R = Speech_descriptives_analysis %>% filter(party == "R") %>% summarise(Num.speeches = n(),mean_par_num = round(mean(n_pars),0), mean_speech_length =  round(mean(speech_length),0),min_date =  min(date, na.rm = T), max_date = max(date, na.rm = T) )
all_descriptives.D =  Speech_descriptives_analysis %>% filter(party == "D") %>% summarise(Num.speeches = n(),mean_par_num = round(mean(n_pars),0), mean_speech_length =  round(mean(speech_length),0),min_date =  min(date, na.rm = T), max_date = max(date, na.rm = T) )
table2[nrow(table2)+1, ] = c(groups = "full sample", all_descriptives, all_descriptives.R, all_descriptives.R)
# make incumbency rows (2)
all_descriptives_incumbent = Speech_descriptives_analysis %>% group_by(party_incumbent) %>% summarise(Num.speeches = n(),mean_par_num = round(mean(n_pars),0), mean_speech_length = round(mean(speech_length),0),min_date =  min(date, na.rm = T), max_date = max(date, na.rm = T) )
all_descriptives_incumbent.R = Speech_descriptives_analysis %>% filter(party == "R") %>% group_by(party_incumbent) %>% summarise(Num.speeches = n(),mean_par_num = round(mean(n_pars),0), mean_speech_length = round(mean(speech_length),0),min_date =  min(date, na.rm = T), max_date = max(date, na.rm = T) ) %>% select(-party_incumbent) # drop fisrt column to avoid duplicates
all_descriptives_incumbent.D = Speech_descriptives_analysis %>% filter(party == "D") %>% group_by(party_incumbent) %>% summarise(Num.speeches = n(),mean_par_num = round(mean(n_pars),0), mean_speech_length = round(mean(speech_length),0),min_date =  min(date, na.rm = T), max_date = max(date, na.rm = T) ) %>% select(-party_incumbent)
table2[2:3, ] = cbind(all_descriptives_incumbent, all_descriptives_incumbent.R, all_descriptives_incumbent.D)
# make year rows (17)
all_descriptives_year = Speech_descriptives_analysis %>% group_by(term) %>% summarise(Num.speeches = n(),mean_par_num = round(mean(n_pars),0), mean_speech_length = round(mean(speech_length),0),min_date =  min(date, na.rm = T), max_date = max(date, na.rm = T) )
all_descriptives_year.R = Speech_descriptives_analysis %>% filter(party == "R") %>% group_by(term) %>% summarise(Num.speeches = n(),mean_par_num = round(mean(n_pars),0), mean_speech_length = round(mean(speech_length),0),min_date =  min(date, na.rm = T), max_date = max(date, na.rm = T) )
all_descriptives_year.D = Speech_descriptives_analysis %>% filter(party == "D") %>% group_by(term) %>% summarise(Num.speeches = n(),mean_par_num = round(mean(n_pars),0), mean_speech_length = round(mean(speech_length),0),min_date =  min(date, na.rm = T), max_date = max(date, na.rm = T) )
table2[4:20, ] = left_join(left_join(all_descriptives_year, all_descriptives_year.R, by = "term"), all_descriptives_year.D, by = "term")
table2[2:3, "groups"] = c("challenger", "incumbent")
# frop year info for each campaign
table2[, c(5,6,10,11,15,16)] = sapply(table2[, c(5,6,10,11,15,16)], format, "%m/%d")
kbl(table2, row.names = F, format = "latex", col.names = columns,format.args = list(big.mark = ","),booktabs = T) %>%
kable_minimal() %>%
add_header_above(c(" " = 1, "Both Parties" = 5, "Republican" = 5, "Democrat" = 5))
Speech_descriptives_analysis
sum(Speech_descriptives_analysis$n_pars)
