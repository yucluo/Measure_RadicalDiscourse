high_pride_speech_level_agg %>%
filter(speech_pred == 0) %>%
ggplot(aes(x = factor(term), y = minus_perc)) +
geom_bar(stat = "identity", position=position_dodge()) + ggtitle("Percentage of High Pride Speeches out of All Speeches in Each Election Year")  + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) + xlab("Term") + ylab("Percentage")
getwd()
setwd("/Users/yuchenluo/Desktop/Measure_RadicalDiscourse/codes")
gdp = read.csv("A191RL1Q225SBEA.csv")
unemployment = read.csv("UNRATE.csv")
head(dgp)
head(gdp)
# mean economic performance of 6 months before the election
library(lubridate)
floor_date
?floor_date
floor_date(gdp$DATE, unit = "months")
class(gdp$DATE)
floor_date(as.Date(gdp$DATE), unit = "months")
round_date(as.Date(gdp$DATE), unit = "months")
round_date(as.Date(gdp$DATE), unit = "month")
format(as.Date(gdp$DATE), "%Y-%m")
gdp$DATE = format(as.Date(gdp$DATE), "%Y-%m")
# keep only 6 months before the election
incumbency_dat = read.csv("incumbency_crosswalk.xlsx")
# keep only 6 months before the election
incumbency_dat = read.csv("incumbency_crosswalk.csv")
incumbency_dat$year
gdp [ format(gdp$DATE, format="%Y") %in% incumbency_dat$year,  ]
format(gdp$DATE, format="%Y") %in% incumbency_dat$year
format(gdp$DATE, format="%Y") %in% as.Date(incumbency_dat$year)
class(incumbency_dat$year)
as.Date(incumbency_dat$year)
format(gdp$DATE, format="%Y")
format(gdp$DATE, "%Y")
year(gdp$DATE)
gdp$DATE = format(as.Date(gdp$DATE), "%Y-%m")
gdp = read.csv("A191RL1Q225SBEA.csv")
gdp$DATE = format(as.Date(gdp$DATE), "%Y-%m")
year(gdp$DATE)
gdp = read.csv("A191RL1Q225SBEA.csv")
gdp$DATE = format(as.POSIXct(gdp$DATE), "%Y-%m")
year(gdp$DATE)
class(gdp$DATE)
gdp$DATE = as.POSIXct(format(as.POSIXct(gdp$DATE), "%Y-%m"))
gdp = read.csv("A191RL1Q225SBEA.csv")
gdp$DATE = as.POSIXct(format(as.POSIXct(gdp$DATE), "%Y-%m"))
gdp = read.csv("A191RL1Q225SBEA.csv")
gdp$DATE = as.Date(format(as.POSIXct(gdp$DATE), "%Y-%m"))
gdp = read.csv("A191RL1Q225SBEA.csv")
gdp$DATE = format(as.POSIXct(gdp$DATE), "%Y-%m")
class(gdp$DATE)
gdp$DATE = as.Date(format(as.POSIXct(gdp$DATE), "%Y-%m"), "%Y-%m")
gdp$DATE = as.Date(format(as.POSIXct(gdp$DATE), "%Y-%m"), "%y-%m")
gdp = read.csv("A191RL1Q225SBEA.csv")
gdp$DATE = as.Date(format(as.POSIXct(gdp$DATE), "%Y-%m"), "%y-%m")
class(gdp$DATE)
year(gdp$DATE)
?year()
gdp$DATE
gdp = read.csv("A191RL1Q225SBEA.csv")
gdp$DATE = format(as.POSIXct(gdp$DATE), "%Y-%m")
class(gdp$DATE)
gdp$DATE
as.Date(gdp$DATE)
as.Date(gdp$DATE, "%Y-%m")
as.POSIXct(gdp$DATE)
as.POSIXct(gdp$DATE,"%Y-%m" )
as.POSIXct(gdp$DATE,format = "%Y-%m" )
gdp = read.csv("A191RL1Q225SBEA.csv")
gdp$DATE = as.POSIXct(gdp$DATE)
class(gdp$DATE)
year(gdp$DATE)
year(gdp$DATE) %in% incumbency_dat$year
gdp = gdp [ year(gdp$DATE) %in% incumbency_dat$year,  ]
length(gdp)
gdp = read.csv("A191RL1Q225SBEA.csv")
# gdp$DATE = as.Date(format(as.POSIXct(gdp$DATE), "%Y-%m"), "%y-%m")
gdp$DATE = as.POSIXct(gdp$DATE)
# keep only 6 months before the election
incumbency_dat = read.csv("incumbency_crosswalk.csv")
gdp = gdp[ year(gdp$DATE) %in% incumbency_dat$year,  ]
length(gdp)
nrow(gdp)
nrow(incumbency_dat)
gdp
gdp = gdp[month(gdp$DATE > 4 & month(gdp$DATE < 11)), ]
gdp = gdp[month(gdp$DATE) > 4 & month(gdp$DATE) < 11, ]
nrow(gdp)
gdp %>% group_by(year(Date))
gdp %>% group_by(year(DATE))
gdp %>% group_by(year(DATE)) %>% summarise(pre_election_gdp = mean(A191RL1Q225SBEA))
pre_election_gdp = gdp %>% group_by(year(DATE)) %>% summarise(pre_election_gdp = mean(A191RL1Q225SBEA))
View(pre_election_gdp)
View(pre_election_gdp)
colnames(pre_election_gdp)[1] = "year"
pre_election_gdp
# add the gdp data to the main dat
incumbency_dat = left_join(incumbency_dat, pre_election_gdp, by = "year")
incumbency_dat
unemployment = read.csv("UNRATE.csv")
head(unemployment)
class(unemployment$DATE)
unemployment$DATE = as.Date(unemployment$DATE)
unemployment = unemployment[year(unemployment$DATE) %in% incumbency_dat$year,  ]
pre_election_unemployment = unemployment %>% group_by(year(DATE)) %>% summarise(pre_election_unemployment = mean(UNRATE))
pre_election_unemployment
colnames(pre_election_unemployment)[1] = "year"
# add the unemployment data to the main dat
incumbency_dat = left_join(incumbency_dat, pre_election_unemployment, by = "year")
incumbency_dat
incumbency_dat[incumbency_dat$party == "rep", "party"] = "republican"
incumbency_dat[incumbency_dat$party == "dem", "party"] = "democrat"
incumbency_dat
write.csv(incumbency_dat, "regression_df.csv")
unemployment = unemployment[month(unemployment$DATE) > 4 & month(unemployment$DATE) < 11,  ]
pre_election_unemployment = unemployment %>% group_by(year(DATE)) %>% summarise(pre_election_unemployment = mean(UNRATE))
colnames(pre_election_unemployment)[1] = "year"
# add the unemployment data to the main dat
incumbency_dat = left_join(incumbency_dat, pre_election_unemployment, by = "year")
# keep only 6 months before the election
incumbency_dat = read.csv("incumbency_crosswalk.csv")
# add the unemployment data to the main dat
incumbency_dat = left_join(incumbency_dat, pre_election_unemployment, by = "year")
incumbency_dat[incumbency_dat$party == "rep", "party"] = "republican"
incumbency_dat[incumbency_dat$party == "dem", "party"] = "democrat"
incumbency_dat
# keep only 6 months before the election
incumbency_dat = read.csv("regression_df")
# keep only 6 months before the election
incumbency_dat = read.csv("regression_df.csv")
# UNEMPLOYMENT
unemployment = read.csv("UNRATE.csv")
unemployment$DATE = as.Date(unemployment$DATE)
unemployment = unemployment[year(unemployment$DATE) %in% incumbency_dat$year,  ]
unemployment = unemployment[month(unemployment$DATE) > 4 & month(unemployment$DATE) < 11,  ]
pre_election_unemployment = unemployment %>% group_by(year(DATE)) %>% summarise(pre_election_unemployment = mean(UNRATE))
colnames(pre_election_unemployment)[1] = "year"
# add the unemployment data to the main dat
incumbency_dat = left_join(incumbency_dat, pre_election_unemployment, by = "year")
incumbency_dat[incumbency_dat$party == "rep", "party"] = "republican"
incumbency_dat[incumbency_dat$party == "dem", "party"] = "democrat"
incumbency_dat
write.csv(incumbency_dat, "regression_df.csv")
# keep only 6 months before the election
incumbency_dat = read.csv("regression_df.csv")
gdp = read.csv("A191RL1Q225SBEA.csv")
# gdp$DATE = as.Date(format(as.POSIXct(gdp$DATE), "%Y-%m"), "%y-%m")
gdp$DATE = as.POSIXct(gdp$DATE)
gdp = gdp[ year(gdp$DATE) %in% incumbency_dat$year,  ]
gdp = gdp[month(gdp$DATE) > 4 & month(gdp$DATE) < 11, ]
pre_election_gdp = gdp %>% group_by(year(DATE)) %>% summarise(pre_election_gdp = mean(A191RL1Q225SBEA))
colnames(pre_election_gdp)[1] = "year"
# add the gdp data to the main dat
incumbency_dat = left_join(incumbency_dat, pre_election_gdp, by = "year")
# UNEMPLOYMENT
unemployment = read.csv("UNRATE.csv")
unemployment$DATE = as.Date(unemployment$DATE)
unemployment = unemployment[year(unemployment$DATE) %in% incumbency_dat$year,  ]
unemployment = unemployment[month(unemployment$DATE) > 4 & month(unemployment$DATE) < 11,  ]
pre_election_unemployment = unemployment %>% group_by(year(DATE)) %>% summarise(pre_election_unemployment = mean(UNRATE))
colnames(pre_election_unemployment)[1] = "year"
# add the unemployment data to the main dat
incumbency_dat = left_join(incumbency_dat, pre_election_unemployment, by = "year")
incumbency_dat
gdp = read.csv("A191RL1Q225SBEA.csv")
# gdp$DATE = as.Date(format(as.POSIXct(gdp$DATE), "%Y-%m"), "%y-%m")
gdp$DATE = as.POSIXct(gdp$DATE)
# keep only 6 months before the election
incumbency_dat = read.csv("regression_df.csv")
gdp = gdp[ year(gdp$DATE) %in% incumbency_dat$year,  ]
gdp = gdp[month(gdp$DATE) > 4 & month(gdp$DATE) < 11, ]
pre_election_gdp = gdp %>% group_by(year(DATE)) %>% summarise(pre_election_gdp = mean(A191RL1Q225SBEA))
colnames(pre_election_gdp)[1] = "year"
# add the gdp data to the main dat
incumbency_dat = left_join(incumbency_dat, pre_election_gdp, by = "year")
# UNEMPLOYMENT
unemployment = read.csv("UNRATE.csv")
unemployment$DATE = as.Date(unemployment$DATE)
unemployment = unemployment[year(unemployment$DATE) %in% incumbency_dat$year,  ]
unemployment = unemployment[month(unemployment$DATE) > 4 & month(unemployment$DATE) < 11,  ]
pre_election_unemployment = unemployment %>% group_by(year(DATE)) %>% summarise(pre_election_unemployment = mean(UNRATE))
colnames(pre_election_unemployment)[1] = "year"
# add the unemployment data to the main dat
incumbency_dat = left_join(incumbency_dat, pre_election_unemployment, by = "year")
incumbency_dat
write.csv(incumbency_dat, "regression_df.csv")
regression_df = read.csv("regression_df.csv")
head(regression_df)
pop_reg = lm(populism ~ party + year + party_incumbent + prior_vp + prior_president + prior_congress + prior_governor + recession + pre_election_gdp + pre_election_unemployment, data = regression_df)
summary(pop_reg)
auth_reg = lm(auth ~ party + year + party_incumbent + prior_vp + prior_president + prior_congress + prior_governor + recession + pre_election_gdp + pre_election_unemployment, data = regression_df)
summary(auth_reg)
auth_reg = lm(auth ~ party + party_incumbent + prior_vp + prior_president + prior_congress + prior_governor + recession + pre_election_gdp + pre_election_unemployment, data = regression_df)
summary(auth_reg)
inclusion_reg = lm(inclusion ~ party + year + party_incumbent + prior_vp + prior_president + prior_congress + prior_governor + recession + pre_election_gdp + pre_election_unemployment, data = regression_df)
summary(inclusion_reg)
exclusion_reg = lm(exclusion ~ party + year + party_incumbent + prior_vp + prior_president + prior_congress + prior_governor + recession + pre_election_gdp + pre_election_unemployment, data = regression_df)
summary(exclusion_reg)
pop_reg_1 = lm(populism ~ recession + pre_election_gdp + pre_election_unemployment, data = regression_df)
pop_reg_1
summary(pop_reg_1)
pop_reg_1 = lm(populism ~ recession, data = regression_df)
pop_reg_1
summary(pop_reg_1)
pop_reg_2 = lm(populism ~ party_incumbent, data = regression_df)
summary(pop_reg_2)
pop_reg_3 = lm(populism ~ recession*party_incumbent, data= recession_df)
pop_reg_3 = lm(populism ~ recession*party_incumbent, data= regression_df)
summary(pop_reg_3)
regression_df
low_pride_reg_1 = lm(low_pride ~ recession, data = regression_df)
summary(low_pride)
summary(low_pride_reg_1)
low_pride_reg_2 = lm(low_pride ~ party_incumbent, data = regression_df)
low_pride_reg_3 = lm(low_pride ~ recession*party_incumbent, data= regression_df)
summary(low_pride_reg_2)
summary(low_pride_reg_3)
auth_pride_reg_1 = lm(auth ~ recession, data = regression_df)
auth_pride_reg_2 = lm(auth_pride ~ party_incumbent, data = regression_df)
auth_pride_reg_3 = lm(auth_pride ~ recession*party_incumbent, data= regression_df)
auth_pride_reg_2 = lm(auth ~ party_incumbent, data = regression_df)
auth_pride_reg_3 = lm(auth ~ recession*party_incumbent, data= regression_df)
summary(auth_pride_reg_1)
summary(auth_pride_reg_2)
summary(auth_pride_reg_3)
prevalence_speech_level
write.csv(prevalence_speech_level)
write.csv(prevalence_speech_level, "prvalence_speech_level.csv")
regression_df = read.csv("regression_df.csv")
pop_reg_1 = lm(populism_speech ~ recession, data = regression_df)
pop_reg_2 = lm(populism_speech ~ party_incumbent, data = regression_df)
pop_reg_3 = lm(populism_speech ~ recession*party_incumbent, data= regression_df)
low_pride_reg_1 = lm(low_pride ~ recession, data = regression_df)
summary(pop_reg_1)
summary(pop_reg_2)
summary(pop_reg_3)
low_pride_reg_1 = lm(low_pride_speech~ recession, data = regression_df)
summary(low_pride_reg_1)
low_pride_reg_2 = lm(low_pride_speech ~ party_incumbent, data = regression_df)
low_pride_reg_3 = lm(low_pride_speech ~ recession*party_incumbent, data= regression_df)
summary(low_pride_reg_2)
summary(low_pride_reg_3)
auth_pride_reg_1 = lm(auth_speech ~ recession, data = regression_df)
auth_pride_reg_2 = lm(auth_speech ~ party_incumbent, data = regression_df)
auth_pride_reg_3 = lm(auth_speech ~ recession*party_incumbent, data= regression_df)
summary(auth_1)
summary(auth_reg_1)
auth_reg_1 = lm(auth_speech ~ recession, data = regression_df)
auth_reg_3 = lm(auth_speech ~ recession*party_incumbent, data= regression_df)
auth_reg_2 = lm(auth_speech ~ party_incumbent, data = regression_df)
summary(auth_reg_1)
summary(auth_reg_2)
summary(auth_reg_3)
library(stargazer)
?stargazer
stargazer(pop_reg_1, pop_reg_2, pop_reg_3, type = "text")
speech_labels
speech_level_prediction = function(file){
dat = read.csv(file)
dat = left_join(dat, all_data %>% select(speech_par_id,Speech_id, term, party, text), by = "speech_par_id")
# use 0.5 as cutoff
dat$predicted = ifelse(dat$Predictions_prob_1 > dat$Predictions_prob_0, 1, 0)
# drop bush 2000
dat = dat[dat$term != 2000 | dat$party != "rep", ]
# aggregate paragraph labels into speech level label
setDT(dat)
speech_level_df = NULL
for (i in unique(dat$Speech_id)){
df = dat[Speech_id == i, ] #isolate each speech
df$speech_pred = ifelse(sum(df$predicted) >0, 1, 0) # create speech label for each line
speech_level_df = rbind(speech_level_df, df)
}
speech_labels = speech_level_df %>% select(Speech_id, term, party, speech_pred)
# drop duplicates
speech_labels = speech_labels[!duplicated(speech_labels)]
return(speech_labels)
}
pop_speech_level = speech_level_prediction("Iteration_3_predictions_populism.csv")
pop_speech_label = speech_level_prediction("Iteration_3_predictions_populism.csv")
auth_speech_label = speech_level_prediction("Iteration_3_predictions_auth.csv")
low_pride_label = speech_level_prediction("Iteration_3_predictions_low_pride.csv")
pop_speech_label
# keep only 6 months before the election
incumbency_dat = read.csv("regression_df.csv")
pop_speech_label = left_join(pop_speech_label, incumbency_dat, by = c('year', 'party')
)
# keep only 6 months before the election
incumbency_dat = read.csv("regression_df.csv")
left_join(pop_speech_label, incumbency_dat, by = c('term', 'party'))
auth_speech_label[auth_speech_label$party == "rep", "party"] = "republican"
auth_speech_label[auth_speech_label$party == "dem", "party"] = "democrat"
low_pride_label[low_pride_label$party == "rep", "party"] = "republican"
low_pride_label[low_pride_label$party == "dem", "party"] = "democrat"
left_join(pop_speech_label, incumbency_dat, by = c('term', 'party'))
class(pop_speech_label$term)
class(incumbency_dat$term)
merge(pop_speech_label, incumbency_dat, by = c('term', 'party'))
pop_speech_label[pop_speech_label$party == "rep", "party"] = "republican"
pop_speech_label[pop_speech_label$party == "dem", "party"] = "democrat"
merge(pop_speech_label, incumbency_dat, by = c('term', 'party'))
auth_speech_label = merge(auth_speech_label, incumbency_dat, by = c('term', 'party'))
low_pride_speech_label = speech_level_prediction("Iteration_3_predictions_low_pride.csv")
low_pride_speech_label[low_pride_label$party == "rep", "party"] = "republican"
low_pride_speech_label[low_pride_label$party == "dem", "party"] = "democrat"
low_pride_speech_label = merge(low_pride_speech_label, incumbency_dat,by = c('term', 'party') )
pop_speech_label
pop_speech_label = merge(pop_speech_label, incumbency_dat, by = c('term', 'party'))
pop_speech_label
pop_reg_1 =  glm(speech_pred ~ party_incumbent, data = pop_speech_label, family = binomial)
summary(pop_reg_1)
pop_reg_2 = glm(speech_pred ~  party_incumbent, data = pop_speech_label)
summary(pop_reg_2)
pop_reg_3 = glm(speech_pred ~ recession*party_incumbent, data= pop_speech_label)
summary(pop_reg_3)
low_pride_reg_1 =  glm(speech_pred ~ recession, data = low_pride_speech_label, family = binomial)
low_pride_reg_2 = glm(speech_pred ~  party_incumbent, data = low_pride_speech_label, family = binomial)
pop_reg_1 =  glm(speech_pred ~ recession, data = pop_speech_label, family = binomial)
low_pride_reg_1 =  glm(speech_pred ~ recession, data = low_pride_speech_label, family = binomial)
low_pride_speech_label
low_pride_speech_label = speech_level_prediction("Iteration_3_predictions_low_pride.csv")
low_pride_speech_label
low_pride_speech_label[low_pride_label$party == "rep", "party"] = "republican"
low_pride_speech_label[low_pride_label$party == "dem", "party"] = "democrat"
low_pride_speech_label = merge(low_pride_speech_label, incumbency_dat,by = c('term', 'party') )
low_pride_speech_label
low_pride_speech_label = speech_level_prediction("Iteration_3_predictions_low_pride.csv")
low_pride_speech_label[low_pride_label$party == "rep", "party"] = "republican"
low_pride_speech_label
low_pride_speech_label[low_pride_label$party == "rep", "party"] = "republican"
low_pride_speech_label
low_pride_speech_label[low_pride_speech_label$party == "rep", "party"] = "republican"
low_pride_speech_label[low_pride_speech_label$party == "dem", "party"] = "democrat"
low_pride_speech_label
low_pride_speech_label = merge(low_pride_speech_label, incumbency_dat,by = c('term', 'party') )
low_pride_reg_1 =  glm(speech_pred ~ recession, data = low_pride_speech_label, family = binomial)
low_pride_reg_2 = glm(speech_pred ~  party_incumbent, data = low_pride_speech_label, family = binomial)
low_pride_reg_3 = glm(speech_pred ~ recession*party_incumbent, data= low_pride_pop_speech_label, family = binomial)
low_pride_reg_3 = glm(speech_pred ~ recession*party_incumbent, data= low_pride_speech_label, family = binomial)
auth_reg_1 =  glm(speech_pred ~ recession, data = auth_speech_label, family = binomial)
auth_reg_2 = glm(speech_pred ~  party_incumbent, data = auth_speech_label, family = binomial)
auth_reg_3 = glm(speech_pred ~ recession*party_incumbent, data= auth_speech_label, family = binomial)
stargazer(pop_reg_1, pop_reg_2, pop_reg_3, type = "text")
stargazer(low_pride_reg_1, low_pride_reg_2, low_pride_reg_3, type = "text")
stargazer(auth_reg_1, auth_reg_2, auth_reg_3, type = "text")
summary(auth_pride_reg_3)
auth_reg_3 = glm(speech_pred ~ recession*party_incumbent, data= auth_speech_label, family = binomial)
summary(auth_reg_3)
stargazer(auth_reg_1, auth_reg_2, auth_reg_3, type = "text")
stargazer(pop_reg_1, pop_reg_2, pop_reg_3, type = "text", title = "Populism")
stargazer(pop_reg_1, pop_reg_2, pop_reg_3, type = "text", title = "Logistic Regression for Populism")
pop_reg_1 =  glm(speech_pred ~ recession, data = pop_speech_label, family = binomial)
pop_reg_2 = glm(speech_pred ~  party_incumbent, data = pop_speech_label)
pop_reg_3 = glm(speech_pred ~ recession*party_incumbent, data= pop_speech_label)
stargazer(pop_reg_1, pop_reg_2, pop_reg_3, type = "text", title = "Logistic Regression for Populism")
pop_reg_1 =  glm(speech_pred ~ recession + pre_election_gdp + pre_election_unemployment, data = pop_speech_label, family = binomial)
summary(pop_reg_1)
summary(glm(speech_pred ~ recession*party_incumbent + pre_election_gdp + pre_election_unemployment, data= pop_speech_label))
stargazer(pop_reg_1, pop_reg_2, pop_reg_3, type = "text", title = "Logistic Regression for Populism")
pop_reg_2 = glm(speech_pred ~  party_incumbent, data = pop_speech_label)
pop_reg_3 = glm(speech_pred ~ recession*party_incumbent, data= pop_speech_label)
pop_reg_1 =  glm(speech_pred ~ recession, data = pop_speech_label, family = binomial)
stargazer(pop_reg_1, pop_reg_2, pop_reg_3, type = "text", title = "Logistic Regression for Populism")
stargazer(pop_reg_1, pop_reg_2, pop_reg_3, type = "text")
pop_reg_2 = glm(speech_pred ~  party_incumbent, data = pop_speech_label, family = binomial)
pop_reg_3 = glm(speech_pred ~ recession*party_incumbent, data= pop_speech_label, family = binomial)
stargazer(pop_reg_1, pop_reg_2, pop_reg_3, type = "text")
stargazer(pop_reg_1, pop_reg_2, pop_reg_3, type = "text", title = "Logistic Regression for Populism")
low_pride_reg_1 =  glm(speech_pred ~ recession, data = low_pride_speech_label, family = binomial)
low_pride_reg_2 = glm(speech_pred ~  party_incumbent, data = low_pride_speech_label, family = binomial)
low_pride_reg_3 = glm(speech_pred ~ recession*party_incumbent, data= low_pride_speech_label, family = binomial)
stargazer(low_pride_reg_1, low_pride_reg_2, low_pride_reg_3, type = "text", title = "Logistic Regression for Low Pride")
auth_reg_1 =  glm(speech_pred ~ recession, data = auth_speech_label, family = binomial)
auth_reg_2 = glm(speech_pred ~  party_incumbent, data = auth_speech_label, family = binomial)
auth_reg_3 = glm(speech_pred ~ recession*party_incumbent, data= auth_speech_label, family = binomial)
stargazer(auth_reg_1, auth_reg_2, auth_reg_3, type = "text", title = "Logistic Regression for Authoratarianism")
?glm
install.packages("Zelig")
install.packages("Zelig")
?zelig
?Zelig
library("Zelig")
?zelig()
?Zelig()
library(Zelig)
install.packages("Rcpp")
install.packages("Rcpp")
library(Zelig)
library("Rcpp")
library(Zelig)
?Zelig()
?zelig
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
library(data.table)
pop_reg_1 =  zelig(speech_pred ~ recession, data = pop_speech_label, model = "logit")
pop_reg_1 =  zelig(speech_pred ~ recession, data = pop_speech_label, model = "logit" cluster = c("term", "party"))
pop_reg_1 =  zelig(speech_pred ~ recession, data = pop_speech_label, model = "logit", cluster = c("term", "party"))
pop_reg_1 =  zelig(speech_pred ~ recession, data = pop_speech_label, model = "logit", cluster = ~term + party)
install.packages(rms)
install.packages('rms')
install.packages("rms")
library(rms)
pop_reg_1=lrm(speech_pred ~ recession, data = pop_speech_label, x=T, y=T)
robcov(pop_reg_1, cluster=c(pop_speech_label$term, pop_speech_label$party))
paste(pop_speech_label$term, pop_speech_label$party)
pop_speech_label$campaign = paste(pop_speech_label$term, pop_speech_label$party)
zelig(speech_pred ~ recession, data = pop_speech_label, model = "logit", cluster = "campaign")
?zelig
pop_speech_label$campaign
zelig(speech_pred ~ recession, data = pop_speech_label, model = "logit", robust = TRUE,cluster = "campaign")
zelig(speech_pred ~ recession, data = pop_speech_label, model = "logit", robust = T,cluster = "campaign")
pop_reg_1
robcov(pop_reg_1, cluster=pop_speech_label$campaign)
pop_reg_2=lrm(speech_pred ~ party_incumbent, data = pop_speech_label, x=T, y=T)
robcov(pop_reg_2, cluster=pop_speech_label$campaign)
pop_reg_3=lrm(speech_pred ~ recession*party_incumbent, data = pop_speech_label, x=T, y=T)
robcov(pop_reg_3, cluster=pop_speech_label$campaign)
stargazer(pop_reg_1, pop_reg_2, pop_reg_3, type = "text", title = "Logistic Regression for Populism")
library(stargazer)
stargazer(pop_reg_1, pop_reg_2, pop_reg_3, type = "text", title = "Logistic Regression for Populism")
pop_reg_1 = robcov(pop_reg_1, cluster=pop_speech_label$campaign)
stargazer(pop_reg_1, pop_reg_2, pop_reg_3, type = "text", title = "Logistic Regression for Populism")
?robcov
```{r regressions}
pop_reg_1=lrm(speech_pred ~ recession, data = pop_speech_label, x=T, y=T)
pop_reg_1 = robcov(pop_reg_1, cluster=pop_speech_label$campaign)
pop_reg_2=lrm(speech_pred ~ party_incumbent, data = pop_speech_label, x=T, y=T)
pop_reg_2 = robcov(pop_reg_2, cluster=pop_speech_label$campaign)
pop_reg_3=lrm(speech_pred ~ recession*party_incumbent, data = pop_speech_label, x=T, y=T)
pop_reg_3 = robcov(pop_reg_3, cluster=pop_speech_label$campaign)
stargazer(pop_reg_1, pop_reg_2, pop_reg_3, type = "text", title = "Logistic Regression for Populism")
dat
speech_level_df$text
speech_level_prediction = function(file){
dat = read.csv(file)
dat = left_join(dat, all_data %>% select(speech_par_id,Speech_id, term, party, text), by = "speech_par_id")
# use 0.5 as cutoff
dat$predicted = ifelse(dat$Predictions_prob_1 > dat$Predictions_prob_0, 1, 0)
# drop bush 2000
dat = dat[dat$term != 2000 | dat$party != "rep", ]
# aggregate paragraph labels into speech level label
setDT(dat)
speech_level_df = NULL
for (i in unique(dat$Speech_id)){
df = dat[Speech_id == i, ] #isolate each speech
df$speech_pred = ifelse(sum(df$predicted) >0, 1, 0) # create speech label for each line
speech_level_df = rbind(speech_level_df, df)
}
speech_level_df$wordcount = sapply(strsplit(speech_level_df$text, " "), length)
speech_labels = speech_level_df %>% select(Speech_id, term, party, wordcount,speech_pred)
word_count = speech_labels %>% group_by(Speech_id) %>% summarise(wordcount = sum(wordcount))
# drop duplicates
speech_labels = speech_labels[!duplicated(speech_labels)]
speech_labels = left_join(speech_labels, word_count, by = "Speech_id")
return(speech_labels)
}
pop_speech_label = speech_level_prediction("Iteration_3_predictions_populism.csv")
dat$text
dat = read.csv("Iteration_3_predictions_populism.csv")
dat = left_join(dat, all_data %>% select(speech_par_id,Speech_id, term, party, text), by = "speech_par_id")
dat = read.csv("Iteration_3_predictions_populism.csv")
dat = left_join(dat, all_data %>% select(speech_par_id,Speech_id, term, party), by = "speech_par_id")
# drop bush 2000
dat = dat[dat$term != 2000 | dat$party != "rep", ]
# aggregate paragraph labels into speech level label
setDT(dat)
speech_level_df = NULL
for (i in unique(dat$Speech_id)){
df = dat[Speech_id == i, ] #isolate each speech
df$speech_pred = ifelse(sum(df$predicted) >0, 1, 0) # create speech label for each line
speech_level_df = rbind(speech_level_df, df)
}
speech_level_df$wordcount = sapply(strsplit(speech_level_df$text, " "), length)
speech_level_df$text
class(speech_level_df$text)
speech_level_df$wordcount = sapply(strsplit(as.character(speech_level_df$text), " "), length)
speech_labels = speech_level_df %>% select(Speech_id, term, party, wordcount,speech_pred)
word_count = speech_labels %>% group_by(Speech_id) %>% summarise(wordcount = sum(wordcount))
# drop duplicates
speech_labels = speech_labels[!duplicated(speech_labels)]
speech_labels = left_join(speech_labels, word_count, by = "Speech_id")
speech_labels
word_count = speech_level_df %>% group_by(Speech_id) %>% summarise(wordcount = sum(wordcount))
speech_labels = speech_level_df %>% select(Speech_id, term, party,speech_pred)
# drop duplicates
speech_labels = speech_labels[!duplicated(speech_labels)]
speech_labels = left_join(speech_labels, word_count, by = "Speech_id")
speech_labels
table(speech_labels$speech_pred)
speech_level_prediction = function(file){
dat = read.csv(file)
dat = left_join(dat, all_data %>% select(speech_par_id,Speech_id, term, party), by = "speech_par_id")
# use 0.5 as cutoff
dat$predicted = ifelse(dat$Predictions_prob_1 > dat$Predictions_prob_0, 1, 0)
# drop bush 2000
dat = dat[dat$term != 2000 | dat$party != "rep", ]
# aggregate paragraph labels into speech level label
setDT(dat)
speech_level_df = NULL
for (i in unique(dat$Speech_id)){
df = dat[Speech_id == i, ] #isolate each speech
df$speech_pred = ifelse(sum(df$predicted) >0, 1, 0) # create speech label for each line
speech_level_df = rbind(speech_level_df, df)
}
speech_level_df$wordcount = sapply(strsplit(as.character(speech_level_df$text), " "), length)
word_count = speech_level_df %>% group_by(Speech_id) %>% summarise(wordcount = sum(wordcount))
speech_labels = speech_level_df %>% select(Speech_id, term, party,speech_pred)
# drop duplicates
speech_labels = speech_labels[!duplicated(speech_labels)]
speech_labels = left_join(speech_labels, word_count, by = "Speech_id")
return(speech_labels)
}
